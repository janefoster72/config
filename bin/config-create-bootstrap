#!/usr/bin/env ruby

require 'config'
require 'tempfile'

blueprint_name = File.basename($0)

usage = "usage: config-create-bootstrap CLUSTER BLUEPRINT IDENTITY"

cluster   = ARGV.shift or abort usage
blueprint = ARGV.shift or abort usage
identity  = ARGV.shift or abort usage

project = Config.project
project.require_all

project.get_cluster(cluster)
project.get_blueprint(blueprint)

identity_file = Tempfile.new("identity")
system_file = Tempfile.new("system")
access_file = Tempfile.new("access")
project_file = Tempfile.new("project")

Config.log_to StringIO.new
Config.blueprint(blueprint_name) do

  hub = project.hub
  data_dir = project.data_dir

  # Install system dependencies.
  add Config::Bootstrap::System do |p|
    p.path = system_file
    # TODO: set ruby,bundler,git versions
  end

  # Establish the identity of the server.
  add Config::Bootstrap::Identity do |p|
    p.path = identity_file
    p.cluster = cluster
    p.blueprint = blueprint
    p.identity = identity
    # TODO: allow secret to be configured per cluster.
    p.secret = data_dir.secret(:default).read
  end

  remote_data_dir = Config::Data::Dir.new("/etc/config")

  # Provide access to the git repos.
  add Config::Bootstrap::Access do |p|
    p.path = access_file
    p.ssh_configs = hub.ssh_configs.map do |c|
      c.to_host_config(remote_data_dir)
    end
    p.ssh_keys = begin
      keys = {}
      hub.ssh_configs.each do |c|
        file = remote_data_dir.ssh_key(c.ssh_key).path
        # TODO: handle the ssh key is missing locally.
        key = data_dir.ssh_key(c.ssh_key).read
        keys[file] = key
      end
      keys
    end
    p.ssh_known_hosts = begin
      hosts = {}
      hub.ssh_hosts.each do |host|
        # TODO: handle the host is missing locally.
        hosts[host] = data_dir.ssh_host_signature(host).read
      end
      hosts
    end
  end

  # Initialize and run the project.
  add Config::Bootstrap::Project do |p|
    p.path = project_file
    p.git_uri = hub.project_config.url
    p.update_project_script = project.update_project_script
  end
end

# Abort on any error.
puts "set -e"

# Show each command that's run.
puts "set -x" # TODO: only enable -x if a debug option is set?

puts
puts "echo; echo '[System]'"
puts system_file.read
puts
puts "echo; echo '[Identity]'"
puts identity_file.read
puts
puts "echo; echo '[Access]'"
puts access_file.read
puts
puts "echo; echo '[Project]'"
puts project_file.read

#libssl-dev
#yaml
